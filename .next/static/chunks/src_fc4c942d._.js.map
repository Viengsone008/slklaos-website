{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/SettingsContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface SettingsData {\n  // General Settings\n  siteName: string;\n  siteDescription: string;\n  siteUrl: string;\n  adminEmail: string;\n  timezone: string;\n  language: string;\n  dateFormat: string;\n  timeFormat: string;\n  \n  // Company Information\n  companyName: string;\n  companyAddress: string;\n  companyPhone: string;\n  companyEmail: string;\n  companyWebsite: string;\n  \n  // Security Settings\n  sessionTimeout: number;\n  maxLoginAttempts: number;\n  passwordMinLength: number;\n  requireStrongPassword: boolean;\n  enableTwoFactor: boolean;\n  autoLogoutInactive: boolean;\n  \n  // Notification Settings\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  notifyNewPosts: boolean;\n  notifyUserRegistration: boolean;\n  notifySystemUpdates: boolean;\n  \n  // Appearance Settings\n  theme: 'light' | 'dark' | 'auto';\n  primaryColor: string;\n  secondaryColor: string;\n  sidebarCollapsed: boolean;\n  showAnimations: boolean;\n  \n  // Content Settings\n  postsPerPage: number;\n  allowComments: boolean;\n  moderateComments: boolean;\n  defaultPostStatus: 'draft' | 'published';\n  autoSaveInterval: number;\n  \n  // Backup Settings\n  autoBackup: boolean;\n  backupFrequency: 'daily' | 'weekly' | 'monthly';\n  backupRetention: number;\n  \n  // Performance Settings\n  enableCaching: boolean;\n  cacheExpiration: number;\n  optimizeImages: boolean;\n  lazyLoading: boolean;\n}\n\ninterface SettingsContextType {\n  settings: SettingsData;\n  updateSettings: (newSettings: Partial<SettingsData>) => void;\n  resetSettings: () => void;\n  exportSettings: () => void;\n  importSettings: (settingsData: Partial<SettingsData>) => void;\n  applyTheme: () => void;\n  formatDate: (date: string | Date) => string;\n  formatTime: (date: string | Date) => string;\n  isLoaded: boolean;\n}\n\nconst defaultSettings: SettingsData = {\n  // General Settings\n  siteName: 'SLK Trading & Design Construction',\n  siteDescription: 'Leading construction company in Laos offering design construction, waterproofing materials, and flooring materials.',\n  siteUrl: 'https://slktrading.la',\n  adminEmail: 'admin@slklaos.la',\n  timezone: 'Asia/Vientiane',\n  language: 'en',\n  dateFormat: 'MM/DD/YYYY',\n  timeFormat: '12',\n  \n  // Company Information\n  companyName: 'SLK Trading & Design Construction Co., Ltd',\n  companyAddress: 'Vientiane Capital, Laos',\n  companyPhone: '+856 21 123 456',\n  companyEmail: 'info@slktrading.la',\n  companyWebsite: 'https://slktrading.la',\n  \n  // Security Settings\n  sessionTimeout: 24,\n  maxLoginAttempts: 5,\n  passwordMinLength: 6,\n  requireStrongPassword: true,\n  enableTwoFactor: false,\n  autoLogoutInactive: true,\n  \n  // Notification Settings\n  emailNotifications: true,\n  pushNotifications: false,\n  notifyNewPosts: true,\n  notifyUserRegistration: true,\n  notifySystemUpdates: true,\n  \n  // Appearance Settings\n  theme: 'light',\n  primaryColor: '#f97316',\n  secondaryColor: '#3b82f6',\n  sidebarCollapsed: false,\n  showAnimations: true,\n  \n  // Content Settings\n  postsPerPage: 10,\n  allowComments: false,\n  moderateComments: true,\n  defaultPostStatus: 'draft',\n  autoSaveInterval: 30,\n  \n  // Backup Settings\n  autoBackup: true,\n  backupFrequency: 'weekly',\n  backupRetention: 30,\n  \n  // Performance Settings\n  enableCaching: true,\n  cacheExpiration: 3600,\n  optimizeImages: true,\n  lazyLoading: true\n};\n\nconst SettingsContext = createContext<SettingsContextType | undefined>(undefined);\n\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\ninterface SettingsProviderProps {\n  children: ReactNode;\n}\n\nexport const SettingsProvider: React.FC<SettingsProviderProps> = ({ children }) => {\n  const [settings, setSettings] = useState<SettingsData>(defaultSettings);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isClient, setIsClient] = useState(false);\n\n  // Client-side hydration check\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Load settings on client-side only\n  useEffect(() => {\n    if (!isClient) return;\n    \n    loadSettings();\n  }, [isClient]);\n\n  // Apply settings when they change (client-side only)\n  useEffect(() => {\n    if (!isClient || !isLoaded) return;\n    \n    applyTheme();\n    applyPrimaryColor();\n    updateDocumentTitle();\n    setupAutoLogout();\n  }, [settings, isClient, isLoaded]);\n\n  const loadSettings = () => {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const savedSettings = localStorage.getItem('slk_admin_settings');\n      if (savedSettings) {\n        const parsed = JSON.parse(savedSettings);\n        setSettings({ ...defaultSettings, ...parsed });\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    } finally {\n      setIsLoaded(true);\n    }\n  };\n\n  const updateSettings = (newSettings: Partial<SettingsData>) => {\n    if (typeof window === 'undefined') return;\n    \n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    \n    try {\n      localStorage.setItem('slk_admin_settings', JSON.stringify(updatedSettings));\n      \n      // Trigger notifications if enabled\n      if (settings.emailNotifications && settings.notifySystemUpdates) {\n        console.log('📧 Settings updated - notification would be sent if email service was configured');\n      }\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  };\n\n  const resetSettings = () => {\n    if (typeof window === 'undefined') return;\n    \n    setSettings(defaultSettings);\n    try {\n      localStorage.removeItem('slk_admin_settings');\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n    }\n  };\n\n  const exportSettings = () => {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const dataStr = JSON.stringify(settings, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `slk-settings-${new Date().toISOString().split('T')[0]}.json`;\n      link.click();\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error exporting settings:', error);\n    }\n  };\n\n  const importSettings = (settingsData: Partial<SettingsData>) => {\n    updateSettings(settingsData);\n  };\n\n  const applyTheme = () => {\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n    \n    try {\n      const root = document.documentElement;\n      \n      if (settings.theme === 'dark') {\n        root.classList.add('dark');\n      } else if (settings.theme === 'light') {\n        root.classList.remove('dark');\n      } else if (settings.theme === 'auto') {\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        if (prefersDark) {\n          root.classList.add('dark');\n        } else {\n          root.classList.remove('dark');\n        }\n      }\n\n      // Apply animations setting\n      if (!settings.showAnimations) {\n        root.style.setProperty('--animation-duration', '0s');\n        root.style.setProperty('--transition-duration', '0s');\n      } else {\n        root.style.removeProperty('--animation-duration');\n        root.style.removeProperty('--transition-duration');\n      }\n    } catch (error) {\n      console.error('Error applying theme:', error);\n    }\n  };\n\n  const applyPrimaryColor = () => {\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n    \n    try {\n      const root = document.documentElement;\n      \n      // Convert hex to RGB for CSS custom properties\n      const hexToRgb = (hex: string) => {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16)\n        } : null;\n      };\n\n      const primaryRgb = hexToRgb(settings.primaryColor);\n      const secondaryRgb = hexToRgb(settings.secondaryColor);\n\n      if (primaryRgb) {\n        root.style.setProperty('--color-primary', `${primaryRgb.r}, ${primaryRgb.g}, ${primaryRgb.b}`);\n        root.style.setProperty('--color-primary-hex', settings.primaryColor);\n      }\n\n      if (secondaryRgb) {\n        root.style.setProperty('--color-secondary', `${secondaryRgb.r}, ${secondaryRgb.g}, ${secondaryRgb.b}`);\n        root.style.setProperty('--color-secondary-hex', settings.secondaryColor);\n      }\n    } catch (error) {\n      console.error('Error applying primary color:', error);\n    }\n  };\n\n  const updateDocumentTitle = () => {\n    if (typeof document === 'undefined') return;\n    \n    try {\n      document.title = `${settings.siteName} - Admin Panel`;\n      \n      // Update meta description\n      const metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (metaDescription) {\n        metaDescription.setAttribute('content', settings.siteDescription);\n      }\n    } catch (error) {\n      console.error('Error updating document title:', error);\n    }\n  };\n\n  const setupAutoLogout = () => {\n    if (typeof window === 'undefined' || !settings.autoLogoutInactive) return;\n    \n    try {\n      const timeoutDuration = settings.sessionTimeout * 60 * 60 * 1000; // Convert hours to milliseconds\n      \n      // Clear existing timeout\n      const existingTimeout = localStorage.getItem('slk_auto_logout_timeout');\n      if (existingTimeout) {\n        clearTimeout(parseInt(existingTimeout));\n      }\n\n      // Set new timeout\n      const timeoutId = setTimeout(() => {\n        console.log('🔒 Auto-logout triggered due to inactivity');\n        try {\n          localStorage.removeItem('admin_user');\n          localStorage.removeItem('slk_extended_session');\n          localStorage.removeItem('slk_login_time');\n          window.location.href = '/admin';\n        } catch (error) {\n          console.error('Error during auto-logout:', error);\n        }\n      }, timeoutDuration);\n\n      localStorage.setItem('slk_auto_logout_timeout', timeoutId.toString());\n    } catch (error) {\n      console.error('Error setting up auto-logout:', error);\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    try {\n      const dateObj = typeof date === 'string' ? new Date(date) : date;\n      \n      // Check for invalid date\n      if (isNaN(dateObj.getTime())) {\n        return 'Invalid Date';\n      }\n      \n      const options: Intl.DateTimeFormatOptions = {\n        timeZone: settings.timezone,\n      };\n\n      switch (settings.dateFormat) {\n        case 'MM/DD/YYYY':\n          options.month = '2-digit';\n          options.day = '2-digit';\n          options.year = 'numeric';\n          return dateObj.toLocaleDateString('en-US', options);\n        case 'DD/MM/YYYY':\n          options.day = '2-digit';\n          options.month = '2-digit';\n          options.year = 'numeric';\n          return dateObj.toLocaleDateString('en-GB', options);\n        case 'YYYY-MM-DD':\n          return dateObj.toISOString().split('T')[0];\n        default:\n          return dateObj.toLocaleDateString();\n      }\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'Invalid Date';\n    }\n  };\n\n  const formatTime = (date: string | Date) => {\n    try {\n      const dateObj = typeof date === 'string' ? new Date(date) : date;\n      \n      // Check for invalid date\n      if (isNaN(dateObj.getTime())) {\n        return 'Invalid Time';\n      }\n      \n      const options: Intl.DateTimeFormatOptions = {\n        timeZone: settings.timezone,\n        hour12: settings.timeFormat === '12',\n        hour: '2-digit',\n        minute: '2-digit',\n      };\n\n      return dateObj.toLocaleTimeString(undefined, options);\n    } catch (error) {\n      console.error('Error formatting time:', error);\n      return 'Invalid Time';\n    }\n  };\n\n  const value: SettingsContextType = {\n    settings,\n    updateSettings,\n    resetSettings,\n    exportSettings,\n    importSettings,\n    applyTheme,\n    formatDate,\n    formatTime,\n    isLoaded\n  };\n\n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsProvider;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/SocialShareContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport { supabase } from '../lib/supabase';\nimport { Post } from '../types/Post';\n\n// Dynamically import toast to prevent SSR issues\nconst toast = dynamic(() => import('react-toastify').then(mod => mod.toast), {\n  ssr: false\n});\n\n// Dynamically import ToastContainer\nconst ToastContainer = dynamic(() => import('react-toastify').then(mod => mod.ToastContainer), {\n  ssr: false\n});\n\n// Import CSS only on client side\nif (typeof window !== 'undefined') {\n  import('react-toastify/dist/ReactToastify.css');\n}\n\ninterface SocialShareContextType {\n  shareToFacebook: (post: Post) => Promise<boolean>;\n  shareToInstagram: (post: Post) => Promise<boolean>;\n  shareToLinkedIn: (post: Post) => Promise<boolean>;\n  shareToAllPlatforms: (post: Post) => Promise<{facebook: boolean, instagram: boolean, linkedin: boolean}>;\n  sendEmailNotification: (post: Post) => Promise<boolean>;\n  isSharing: boolean;\n  lastSharedPost: Post | null;\n  sharingStats: {\n    facebook: number;\n    instagram: number;\n    linkedin: number;\n    email: number;\n  };\n}\n\nconst SocialShareContext = createContext<SocialShareContextType | undefined>(undefined);\n\nexport const useSocialShare = () => {\n  const context = useContext(SocialShareContext);\n  if (context === undefined) {\n    throw new Error('useSocialShare must be used within a SocialShareProvider');\n  }\n  return context;\n};\n\ninterface SocialShareProviderProps {\n  children: ReactNode;\n}\n\nexport const SocialShareProvider: React.FC<SocialShareProviderProps> = ({ children }) => {\n  const [isClient, setIsClient] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [lastSharedPost, setLastSharedPost] = useState<Post | null>(null);\n  const [sharingStats, setSharingStats] = useState({\n    facebook: 0,\n    instagram: 0,\n    linkedin: 0,\n    email: 0\n  });\n\n  // Client-side hydration check\n  useEffect(() => {\n    setIsClient(true);\n    \n    // Load sharing stats from localStorage\n    if (typeof window !== 'undefined') {\n      const savedStats = localStorage.getItem('sharingStats');\n      if (savedStats) {\n        try {\n          setSharingStats(JSON.parse(savedStats));\n        } catch (error) {\n          console.error('Error loading sharing stats:', error);\n        }\n      }\n    }\n  }, []);\n\n  // Save stats to localStorage whenever they change\n  useEffect(() => {\n    if (isClient && typeof window !== 'undefined') {\n      localStorage.setItem('sharingStats', JSON.stringify(sharingStats));\n    }\n  }, [sharingStats, isClient]);\n\n  // Helper function to show toast notifications\n  const showToast = async (type: 'success' | 'error' | 'info', message: string) => {\n    if (!isClient) return;\n    \n    try {\n      const toastModule = await import('react-toastify');\n      toastModule.toast[type](message);\n    } catch (error) {\n      console.error('Error showing toast:', error);\n      // Fallback to console log\n      console.log(`${type.toUpperCase()}: ${message}`);\n    }\n  };\n\n  // Function to get base URL safely\n  const getBaseUrl = (): string => {\n    if (typeof window !== 'undefined') {\n      return window.location.origin;\n    }\n    // Fallback for SSR\n    return process.env.NEXT_PUBLIC_SITE_URL || 'https://localhost:3000';\n  };\n\n  // Function to share to Facebook\n  const shareToFacebook = async (post: Post): Promise<boolean> => {\n    try {\n      setIsSharing(true);\n\n      const res = await fetch('/api/share-facebook', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ post }),\n      });\n      const data = await res.json();\n\n      if (!res.ok) {\n        console.error('Facebook API error:', data);\n        throw new Error(data.error || 'Failed to share on Facebook');\n      }\n\n      setLastSharedPost(post);\n      setSharingStats(prev => ({\n        ...prev,\n        facebook: prev.facebook + 1\n      }));\n\n      await showToast('success', 'Shared to Facebook successfully!');\n      return true;\n    } catch (error) {\n      console.error('❌ Error sharing to Facebook:', error);\n      await showToast('error', 'Failed to share to Facebook. Please try again.');\n      return false;\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  // Function to share to Instagram\n  const shareToInstagram = async (post: Post): Promise<boolean> => {\n    try {\n      setIsSharing(true);\n      console.log('🔄 Sharing to Instagram:', post.title);\n      \n      if (!isClient) {\n        throw new Error('Social sharing only available on client side');\n      }\n\n      const shareData = {\n        platform: 'instagram',\n        post: {\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt,\n          featuredImage: post.featuredImage,\n          url: `${getBaseUrl()}/news/${post.id}`,\n          content: post.content ? post.content.substring(0, 200) + '...' : post.excerpt,\n          tags: post.tags\n        }\n      };\n\n      const { data, error } = await supabase.functions.invoke('share-to-social', {\n        body: shareData\n      });\n\n      if (error) {\n        console.error('Supabase function error:', error);\n        throw error;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 1800));\n      \n      console.log('✅ Shared to Instagram successfully:', {\n        postId: post.id,\n        postTitle: post.title,\n        timestamp: new Date().toISOString(),\n        instagramMediaId: data?.mediaId || `ig_${Date.now()}_${Math.floor(Math.random() * 1000)}`\n      });\n      \n      setLastSharedPost(post);\n      \n      setSharingStats(prev => ({\n        ...prev,\n        instagram: prev.instagram + 1\n      }));\n      \n      await showToast('success', 'Shared to Instagram successfully!');\n      return true;\n    } catch (error) {\n      console.error('❌ Error sharing to Instagram:', error);\n      await showToast('error', 'Failed to share to Instagram. Please try again.');\n      return false;\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  // Function to share to LinkedIn\n  const shareToLinkedIn = async (post: Post): Promise<boolean> => {\n    try {\n      setIsSharing(true);\n      console.log('🔄 Sharing to LinkedIn:', post.title);\n      \n      if (!isClient) {\n        throw new Error('Social sharing only available on client side');\n      }\n\n      const shareData = {\n        platform: 'linkedin',\n        post: {\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt,\n          featuredImage: post.featuredImage,\n          url: `${getBaseUrl()}/news/${post.id}`,\n          content: post.content ? post.content.substring(0, 200) + '...' : post.excerpt,\n          tags: post.tags\n        }\n      };\n\n      const { data, error } = await supabase.functions.invoke('share-to-social', {\n        body: shareData\n      });\n\n      if (error) {\n        console.error('Supabase function error:', error);\n        throw error;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 1600));\n      \n      console.log('✅ Shared to LinkedIn successfully:', {\n        postId: post.id,\n        postTitle: post.title,\n        timestamp: new Date().toISOString(),\n        linkedinPostId: data?.postId || `li_${Date.now()}_${Math.floor(Math.random() * 1000)}`\n      });\n      \n      setLastSharedPost(post);\n      \n      setSharingStats(prev => ({\n        ...prev,\n        linkedin: prev.linkedin + 1\n      }));\n      \n      await showToast('success', 'Shared to LinkedIn successfully!');\n      return true;\n    } catch (error) {\n      console.error('❌ Error sharing to LinkedIn:', error);\n      await showToast('error', 'Failed to share to LinkedIn. Please try again.');\n      return false;\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  // Function to share to all platforms\n  const shareToAllPlatforms = async (post: Post): Promise<{facebook: boolean, instagram: boolean, linkedin: boolean}> => {\n    if (!isClient) {\n      await showToast('error', 'Social sharing only available on client side');\n      return { facebook: false, instagram: false, linkedin: false };\n    }\n\n    setIsSharing(true);\n    console.log('🔄 Sharing to all platforms:', post.title);\n    \n    try {\n      // Share to all platforms sequentially to avoid rate limiting\n      const facebookResult = await shareToFacebook(post).catch(() => false);\n      await new Promise(resolve => setTimeout(resolve, 500)); // Small delay between shares\n      \n      const instagramResult = await shareToInstagram(post).catch(() => false);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const linkedinResult = await shareToLinkedIn(post).catch(() => false);\n      \n      // Count successful shares\n      const successCount = [facebookResult, instagramResult, linkedinResult].filter(Boolean).length;\n      \n      if (successCount === 3) {\n        await showToast('success', 'Successfully shared to all platforms!');\n      } else if (successCount > 0) {\n        await showToast('info', `Shared to ${successCount} out of 3 platforms`);\n      } else {\n        await showToast('error', 'Failed to share to any platform');\n      }\n      \n      return {\n        facebook: facebookResult,\n        instagram: instagramResult,\n        linkedin: linkedinResult\n      };\n    } catch (error) {\n      console.error('❌ Error sharing to all platforms:', error);\n      await showToast('error', 'An error occurred while sharing');\n      return {\n        facebook: false,\n        instagram: false,\n        linkedin: false\n      };\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  // Function to send email notification to subscribers\n  const sendEmailNotification = async (post: Post): Promise<boolean> => {\n    try {\n      setIsSharing(true);\n      console.log('📧 Sending email notification for post:', post.title);\n      \n      if (!isClient) {\n        throw new Error('Email notifications only available on client side');\n      }\n\n      const emailData = {\n        post: {\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt,\n          featuredImage: post.featuredImage,\n          url: `${getBaseUrl()}/news/${post.id}`,\n          content: post.content ? post.content.substring(0, 200) + '...' : post.excerpt,\n          author: post.author,\n          publishedAt: post.publishedAt\n        }\n      };\n\n      const { data, error } = await supabase.functions.invoke('send-email-notification', {\n        body: emailData\n      });\n\n      if (error) {\n        console.error('Supabase function error:', error);\n        throw error;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const recipientCount = data?.recipientCount || Math.floor(Math.random() * 100) + 50;\n      \n      console.log('✅ Email notification sent successfully:', {\n        postId: post.id,\n        postTitle: post.title,\n        timestamp: new Date().toISOString(),\n        recipientCount\n      });\n      \n      setSharingStats(prev => ({\n        ...prev,\n        email: prev.email + 1\n      }));\n      \n      await showToast('success', `Email notification sent to ${recipientCount} subscribers!`);\n      return true;\n    } catch (error) {\n      console.error('❌ Error sending email notification:', error);\n      await showToast('error', 'Failed to send email notification. Please try again.');\n      return false;\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  const value: SocialShareContextType = {\n    shareToFacebook,\n    shareToInstagram,\n    shareToLinkedIn,\n    shareToAllPlatforms,\n    sendEmailNotification,\n    isSharing,\n    lastSharedPost,\n    sharingStats\n  };\n\n  return (\n    <SocialShareContext.Provider value={value}>\n      {children}\n      {isClient && (\n        <ToastContainer \n          position=\"bottom-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n          theme=\"light\"\n        />\n      )}\n    </SocialShareContext.Provider>\n  );\n};\n\n// Export a client-side only version for pages that need it\nexport const ClientOnlySocialShareProvider: React.FC<SocialShareProviderProps> = ({ children }) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return <>{children}</>;\n  }\n\n  return <SocialShareProvider>{children}</SocialShareProvider>;\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/PostContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { Post, PostFormData } from '../types/Post';\nimport { useDatabase } from './DatabaseContext';\nimport { supabase } from '../lib/supabase';\n\ninterface PostContextType {\n  posts: Post[];\n  isLoading: boolean;\n  error: string | null;\n  addPost: (post: PostFormData) => Promise<void>;\n  updatePost: (id: string, postData: PostFormData) => Promise<void>;\n  deletePost: (id: string) => Promise<void>;\n  getPost: (id: string) => Post | undefined;\n  getPublishedPosts: () => Post[];\n  getScheduledPosts: () => Post[];\n  getPostsByCategory: (category: Post['category']) => Post[];\n  checkScheduledPosts: () => void;\n  refreshPosts: () => Promise<void>;\n}\n\nconst PostContext = createContext<PostContextType | undefined>(undefined);\n\nexport const usePost = () => {\n  const context = useContext(PostContext);\n  if (!context) {\n    throw new Error('usePost must be used within a PostProvider');\n  }\n  return context;\n};\n\ninterface PostProviderProps {\n  children: ReactNode;\n}\n\nexport const PostProvider: React.FC<PostProviderProps> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isClient, setIsClient] = useState(false);\n  \n  // Get database context with fallback\n  let subscribeToChanges: any;\n  let broadcastChange: any;\n  \n  try {\n    const dbContext = useDatabase();\n    subscribeToChanges = dbContext?.subscribeToChanges;\n    broadcastChange = dbContext?.broadcastChange;\n  } catch (err) {\n    console.warn('DatabaseContext not available, running without real-time sync');\n  }\n\n  // Client-side detection\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Load posts with error handling\n  const loadPosts = useCallback(async () => {\n    if (!isClient) return;\n    \n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const { data, error: fetchError } = await supabase\n        .from('posts')\n        .select('*')\n        .order('published_at', { ascending: false });\n\n      if (fetchError) {\n        throw new Error(`Failed to fetch posts: ${fetchError.message}`);\n      }\n      \n      if (data) {\n        setPosts(data);\n        console.log('✅ Posts loaded successfully:', data.length);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n      console.error('❌ Failed to load posts:', errorMessage);\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isClient]);\n\n  // Setup real-time synchronization\n  const setupRealTimeSync = useCallback(() => {\n    if (!isClient || !subscribeToChanges) {\n      return () => {}; // Return empty cleanup function\n    }\n\n    try {\n      return subscribeToChanges((records: any[]) => {\n        const postRecords = records.filter(record => record.type === 'posts');\n        if (postRecords.length > 0) {\n          console.log('🔄 Syncing posts from real-time updates');\n          loadPosts();\n        }\n      });\n    } catch (err) {\n      console.warn('Failed to setup real-time sync:', err);\n      return () => {}; // Return empty cleanup function\n    }\n  }, [isClient, subscribeToChanges, loadPosts]);\n\n  // Check and update scheduled posts\n  const checkScheduledPosts = useCallback(() => {\n    if (!isClient || posts.length === 0) return;\n\n    const now = new Date();\n    let hasChanges = false;\n    \n    const updatedPosts = posts.map(post => {\n      if (post.status === 'scheduled' && post.scheduledAt) {\n        const scheduledTime = new Date(post.scheduledAt);\n        if (scheduledTime <= now) {\n          hasChanges = true;\n          return {\n            ...post,\n            status: 'published' as const,\n            publishedAt: now.toISOString()\n          };\n        }\n      }\n      return post;\n    });\n\n    if (hasChanges) {\n      setPosts(updatedPosts);\n      \n      // Broadcast changes if available\n      if (broadcastChange) {\n        try {\n          broadcastChange(\n            {\n              id: 'posts-scheduled-update',\n              type: 'posts',\n              data: updatedPosts,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n              createdBy: 'system',\n              version: 1\n            },\n            'update'\n          );\n        } catch (err) {\n          console.warn('Failed to broadcast scheduled post changes:', err);\n        }\n      }\n      \n      console.log('✅ Scheduled posts updated');\n    }\n  }, [isClient, posts, broadcastChange]);\n\n  // Initialize context\n  useEffect(() => {\n    if (!isClient) return;\n\n    let unsubscribe: (() => void) | undefined;\n    let interval: NodeJS.Timeout | undefined;\n\n    const initialize = async () => {\n      await loadPosts();\n      unsubscribe = setupRealTimeSync();\n      \n      // Check scheduled posts every minute\n      interval = setInterval(checkScheduledPosts, 60000);\n    };\n\n    initialize();\n\n    return () => {\n      if (unsubscribe) {\n        try {\n          unsubscribe();\n        } catch (err) {\n          console.warn('Error during cleanup:', err);\n        }\n      }\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isClient, loadPosts, setupRealTimeSync, checkScheduledPosts]);\n\n  // Add new post\n  const addPost = useCallback(async (postData: PostFormData) => {\n    if (!isClient) return;\n\n    try {\n      setError(null);\n      \n      // Generate UUID safely for client-side\n      const generateId = () => {\n        if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n          return crypto.randomUUID();\n        }\n        // Fallback for environments without crypto.randomUUID\n        return 'post-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n      };\n\n      const newPost: Post = {\n        id: generateId(),\n        ...postData,\n        author: postData.author || 'SLK Admin',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        publishedAt: postData.status === 'published' ? new Date().toISOString() : undefined,\n        scheduledAt: postData.status === 'scheduled' ? postData.scheduledAt : undefined\n      };\n\n      // Insert into Supabase\n      const { error: insertError } = await supabase\n        .from('posts')\n        .insert([newPost]);\n\n      if (insertError) {\n        throw new Error(`Failed to create post: ${insertError.message}`);\n      }\n\n      // Update local state\n      setPosts(prev => [newPost, ...prev]);\n\n      // Broadcast change if available\n      if (broadcastChange) {\n        try {\n          broadcastChange({\n            id: 'posts-add',\n            type: 'posts',\n            data: newPost,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            createdBy: 'user',\n            version: 1\n          }, 'insert');\n        } catch (err) {\n          console.warn('Failed to broadcast post addition:', err);\n        }\n      }\n\n      console.log('✅ Post added successfully:', newPost.title);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to add post';\n      console.error('❌ Error adding post:', errorMessage);\n      setError(errorMessage);\n      throw err; // Re-throw for component error handling\n    }\n  }, [isClient, broadcastChange]);\n\n  // Update existing post\n  const updatePost = useCallback(async (id: string, postData: PostFormData) => {\n    if (!isClient) return;\n\n    try {\n      setError(null);\n      \n      const existing = posts.find(p => p.id === id);\n      if (!existing) {\n        throw new Error('Post not found');\n      }\n\n      const updatedPost: Post = {\n        ...existing,\n        ...postData,\n        updatedAt: new Date().toISOString(),\n        scheduledAt: postData.status === 'scheduled' ? postData.scheduledAt : undefined,\n        publishedAt: postData.status === 'published' && !existing.publishedAt \n          ? new Date().toISOString() \n          : existing.publishedAt\n      };\n\n      // Update in Supabase\n      const { error: updateError } = await supabase\n        .from('posts')\n        .update(updatedPost)\n        .eq('id', id);\n\n      if (updateError) {\n        throw new Error(`Failed to update post: ${updateError.message}`);\n      }\n\n      // Update local state\n      const updatedPosts = posts.map(p => (p.id === id ? updatedPost : p));\n      setPosts(updatedPosts);\n\n      // Broadcast change if available\n      if (broadcastChange) {\n        try {\n          broadcastChange({\n            id: 'posts-update',\n            type: 'posts',\n            data: updatedPost,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            createdBy: 'user',\n            version: 1\n          }, 'update');\n        } catch (err) {\n          console.warn('Failed to broadcast post update:', err);\n        }\n      }\n\n      console.log('✅ Post updated successfully:', id);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update post';\n      console.error('❌ Error updating post:', errorMessage);\n      setError(errorMessage);\n      throw err; // Re-throw for component error handling\n    }\n  }, [isClient, posts, broadcastChange]);\n\n  // Delete post\n  const deletePost = useCallback(async (id: string) => {\n    if (!isClient) return;\n\n    try {\n      setError(null);\n      \n      // Delete from Supabase\n      const { error: deleteError } = await supabase\n        .from('posts')\n        .delete()\n        .eq('id', id);\n\n      if (deleteError) {\n        throw new Error(`Failed to delete post: ${deleteError.message}`);\n      }\n\n      // Update local state\n      const updatedPosts = posts.filter(p => p.id !== id);\n      setPosts(updatedPosts);\n\n      // Broadcast change if available\n      if (broadcastChange) {\n        try {\n          broadcastChange({\n            id: 'posts-delete',\n            type: 'posts',\n            data: { id },\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            createdBy: 'user',\n            version: 1\n          }, 'delete');\n        } catch (err) {\n          console.warn('Failed to broadcast post deletion:', err);\n        }\n      }\n\n      console.log('✅ Post deleted successfully:', id);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete post';\n      console.error('❌ Error deleting post:', errorMessage);\n      setError(errorMessage);\n      throw err; // Re-throw for component error handling\n    }\n  }, [isClient, posts, broadcastChange]);\n\n  // Utility functions\n  const getPost = useCallback((id: string) => {\n    return posts.find(p => p.id === id);\n  }, [posts]);\n\n  const getPublishedPosts = useCallback(() => {\n    return posts.filter(p => p.status === 'published');\n  }, [posts]);\n\n  const getScheduledPosts = useCallback(() => {\n    return posts.filter(p => p.status === 'scheduled');\n  }, [posts]);\n\n  const getPostsByCategory = useCallback((category: Post['category']) => {\n    return posts.filter(p => p.category === category && p.status === 'published');\n  }, [posts]);\n\n  // Refresh posts manually\n  const refreshPosts = useCallback(async () => {\n    await loadPosts();\n  }, [loadPosts]);\n\n  const value: PostContextType = {\n    posts,\n    isLoading,\n    error,\n    addPost,\n    updatePost,\n    deletePost,\n    getPost,\n    getPublishedPosts,\n    getScheduledPosts,\n    getPostsByCategory,\n    checkScheduledPosts,\n    refreshPosts\n  };\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n\n// Higher-order component for pages that need post data\nexport const withPostProvider = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  const WrappedComponent = (props: P) => (\n    <PostProvider>\n      <Component {...props} />\n    </PostProvider>\n  );\n  \n  WrappedComponent.displayName = `withPostProvider(${Component.displayName || Component.name})`;\n  return WrappedComponent;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1238, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/pages/api/reminder-email-template.ts"],"sourcesContent":["import { supabase } from \"@/lib/supabase\";\n\nexport async function getAppointmentForCandidate(candidateEmail: string) {\n  const { data, error } = await supabase\n    .from(\"appointments\")\n    .select(\"date, time\")\n    .eq(\"candidate_email\", candidateEmail)\n    .eq(\"status\", \"confirmed\")\n    .single();\n\n  if (error || !data) {\n    return { slotSelected: false };\n  }\n\n  return {\n    slotSelected: true,\n    interviewDate: data.date,\n    interviewTime: data.time,\n  };\n}\n\nexport function getReminderEmailTemplate({\n  candidateName,\n  interviewDate,\n  interviewTime,\n  slotSelected,\n}: {\n  candidateName: string;\n  interviewDate?: string;\n  interviewTime?: string;\n  slotSelected: boolean;\n}) {\n  let subject = \"Interview Appointment Reminder\";\n  let message = \"\";\n\n  const footer = `\n------------------------------------------------------------\nThis message was sent by SLK Trading & Design Construction Co., Ltd.\nWebsite: www.slklaos.la\nEmail: info@slklaos.la | hr@slklaos.la\nLocation: Vientiane, Laos\n© ${new Date().getFullYear()} SLK Trading & Design Construction Co., Ltd. All rights reserved.\n`;\n\n  if (!slotSelected) {\n    message = `Dear ${candidateName},\n\nWe hope this message finds you well.\n\nYou have been shortlisted for an interview at SLK Trading & Design Construction Co., Ltd. But you haven't selected your interview appointment slot yet. To proceed, please select your preferred interview appointment slot as soon as possible using the link provided in your previous email.\n\nIf you have any questions or require assistance, feel free to contact our HR team.\n\nBest regards,\nSLK HR Team\n${footer}`;\n  } else {\n    message = `Dear ${candidateName},\n\nThis is a friendly reminder of your upcoming interview at SLK Trading & Design Construction Co., Ltd.\n\nInterview Date: ${interviewDate}\nInterview Time: ${interviewTime}\n\nPlease ensure you arrive on time and bring any necessary documents.\n\nIf you need to reschedule or have any questions, please go to the appointment link in your previous email then enter your name and cancel/reschedule your appointment or contact our HR team.\n\nBest regards,\nSLK HR Team\n${footer}`;\n  }\n\n  return { subject, message };\n}\n\n// POSTMAN-ready API handler\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { candidateName, candidateEmail } = req.body;\n\n  if (!candidateName || !candidateEmail) {\n    return res.status(400).json({ error: \"Missing candidateName or candidateEmail\" });\n  }\n\n  const appointment = await getAppointmentForCandidate(candidateEmail);\n\n  const email = getReminderEmailTemplate({\n    candidateName,\n    interviewDate: appointment.interviewDate,\n    interviewTime: appointment.interviewTime,\n    slotSelected: appointment.slotSelected,\n  });\n\n  res.status(200).json(email);\n}"],"names":[],"mappings":";;;;;AAAA;;AAEO,eAAe,2BAA2B,cAAsB;IACrE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,yHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,gBACL,MAAM,CAAC,cACP,EAAE,CAAC,mBAAmB,gBACtB,EAAE,CAAC,UAAU,aACb,MAAM;IAET,IAAI,SAAS,CAAC,MAAM;QAClB,OAAO;YAAE,cAAc;QAAM;IAC/B;IAEA,OAAO;QACL,cAAc;QACd,eAAe,KAAK,IAAI;QACxB,eAAe,KAAK,IAAI;IAC1B;AACF;AAEO,SAAS,yBAAyB,KAUxC;QAVwC,EACvC,aAAa,EACb,aAAa,EACb,aAAa,EACb,YAAY,EAMb,GAVwC;IAWvC,IAAI,UAAU;IACd,IAAI,UAAU;IAEd,MAAM,SAAS,AAAC,uOAMW,OAAzB,IAAI,OAAO,WAAW,IAAG;IAG3B,IAAI,CAAC,cAAc;QACjB,UAAU,AAAC,QAUb,OAVoB,eAAc,scAU3B,OAAP;IACA,OAAO;QACL,UAAU,AAAC,QAIG,OAJI,eAAc,kIAKlB,OADA,eAAc,sBAS9B,OARgB,eAAc,4SAQvB,OAAP;IACA;IAEA,OAAO;QAAE;QAAS;IAAQ;AAC5B;AAGe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,GAAG,IAAI,IAAI;IAElD,IAAI,CAAC,iBAAiB,CAAC,gBAAgB;QACrC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAA0C;IACjF;IAEA,MAAM,cAAc,MAAM,2BAA2B;IAErD,MAAM,QAAQ,yBAAyB;QACrC;QACA,eAAe,YAAY,aAAa;QACxC,eAAe,YAAY,aAAa;QACxC,cAAc,YAAY,YAAY;IACxC;IAEA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;AACvB","debugId":null}}]
}