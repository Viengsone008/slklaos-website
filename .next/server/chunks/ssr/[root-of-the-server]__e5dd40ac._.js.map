{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/LanguageContext.tsx"],"sourcesContent":["\n\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Supported languages array\nexport const languages = [\n  { code: 'en', label: 'English', flag: '🇺🇸', nativeName: 'English', name: 'English' },\n  { code: 'de', label: 'Deutsch', flag: '🇩🇪', nativeName: 'Deutsch', name: 'German' },\n  { code: 'vi', label: 'Tiếng Việt', flag: '🇻🇳', nativeName: 'Tiếng Việt', name: 'Vietnamese' },\n  { code: 'lo', label: 'Lao', flag: '🇱🇦', nativeName: 'ລາວ', name: 'Lao' },\n  { code: 'th', label: 'ไทย', flag: '🇹🇭', nativeName: 'ไทย', name: 'Thai' },\n  { code: 'hu', label: 'Magyar', flag: '🇭🇺', nativeName: 'Magyar', name: 'Hungarian' },\n  { code: 'it', label: 'Italiano', flag: '🇮🇹', nativeName: 'Italiano', name: 'Italian' },\n  // Add more as needed\n];\n\ninterface LanguageContextType {\n  currentLanguage: string;\n  setLanguage: (lang: string) => void;\n  t: (text: string) => string;\n  languages: typeof languages;\n  isLoading: boolean;\n}\n\n\n\nconst GOOGLE_TRANSLATE_URL = 'https://translation.googleapis.com/language/translate/v2';\nconst GOOGLE_API_KEY = 'AIzaSyCBgu7_wcOokxRxrwle59tbJHw-2oxBHKQ';\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {\n  const [currentLanguage, setCurrentLanguage] = useState<string>('en');\n  const [isLoading, setIsLoading] = useState(true);\n  const [isClient, setIsClient] = useState(false);\n  const [dynamicTranslations, setDynamicTranslations] = useState<Record<string, string>>({});\n  const [isTranslating, setIsTranslating] = useState(false);\n\n  // Client-side hydration check\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  useEffect(() => {\n    if (!isClient) return;\n    \n    const initializeLanguage = () => {\n      try {\n        // Load saved language preference from localStorage\n        const savedLanguage = localStorage.getItem('slk_language');\n        \n        if (savedLanguage && languages.some(lang => lang.code === savedLanguage)) {\n          setCurrentLanguage(savedLanguage);\n        } else {\n          // Try to detect browser language\n          const browserLang = navigator.language.split('-')[0];\n          if (languages.some(lang => lang.code === browserLang)) {\n            setCurrentLanguage(browserLang);\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to load language preference:', error);\n        // Fallback to English\n        setCurrentLanguage('en');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Small delay to ensure proper hydration\n    const timer = setTimeout(initializeLanguage, 100);\n    \n    return () => clearTimeout(timer);\n  }, [isClient]);\n\n  const setLanguage = (language: string) => {\n    if (!languages.some(lang => lang.code === language)) {\n      console.warn(`Language ${language} is not supported`);\n      return;\n    }\n\n    setCurrentLanguage(language);\n    \n    if (isClient) {\n      try {\n        localStorage.setItem('slk_language', language);\n      } catch (error) {\n        console.warn('Failed to save language preference:', error);\n      }\n    }\n  };\n\n  // Main translation function: always use dynamic translation (Google API), fallback to key\n  const t = (text: string): string => {\n    if (!text) return '';\n    if (currentLanguage === 'en') return text;\n    if (dynamicTranslations[text]) return dynamicTranslations[text];\n    return text;\n  };\n\n  // Auto-translate all visible strings and cache them\n  useEffect(() => {\n    if (!isClient || currentLanguage === 'en') return;\n    setIsTranslating(true);\n    console.log('[i18n] Attempting translation for language:', currentLanguage);\n    // Find all visible strings in the DOM\n    const elements = Array.from(document.querySelectorAll('[data-i18n]')) as HTMLElement[];\n    const texts = Array.from(new Set(elements.map(el => el.getAttribute('data-i18n') || '').filter(Boolean)));\n    const toTranslate = texts.filter(t => !dynamicTranslations[t]);\n    if (toTranslate.length === 0) {\n      setIsTranslating(false);\n      return;\n    }\n    const fetchTranslations = async () => {\n      const newTranslations: Record<string, string> = { ...dynamicTranslations };\n      for (const text of toTranslate) {\n        try {\n          const cacheKey = `slk_dyntrans_${currentLanguage}_${text}`;\n          const cached = localStorage.getItem(cacheKey);\n          if (cached) {\n            newTranslations[text] = cached;\n            continue;\n          }\n          console.log(`[i18n] Translating \"${text}\" to ${currentLanguage}`);\n          const res = await fetch(`${GOOGLE_TRANSLATE_URL}?key=${GOOGLE_API_KEY}`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              q: text,\n              source: 'en',\n              target: currentLanguage,\n            }),\n          });\n          const data = await res.json();\n          console.log('[i18n] API response:', data);\n          const translated = data?.data?.translations?.[0]?.translatedText;\n          if (translated) {\n            newTranslations[text] = translated;\n            localStorage.setItem(cacheKey, translated);\n          } else {\n            console.warn('Google Translate API did not return a translation:', data);\n          }\n        } catch (e) {\n          console.error('Translation API error:', e);\n        }\n      }\n      setDynamicTranslations(newTranslations);\n      setIsTranslating(false);\n    };\n    fetchTranslations();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentLanguage, isClient]);\n\n  const value: LanguageContextType = {\n    currentLanguage,\n    setLanguage,\n    t,\n    languages,\n    isLoading\n  };\n\n  // Don't render children until client-side hydration is complete\n  if (!isClient || isLoading || isTranslating) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">{isTranslating ? 'Translating...' : 'Loading Language Settings...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport default LanguageProvider;"],"names":[],"mappings":";;;;;;;AAEA;AADA;;;AAIO,MAAM,YAAY;IACvB;QAAE,MAAM;QAAM,OAAO;QAAW,MAAM;QAAQ,YAAY;QAAW,MAAM;IAAU;IACrF;QAAE,MAAM;QAAM,OAAO;QAAW,MAAM;QAAQ,YAAY;QAAW,MAAM;IAAS;IACpF;QAAE,MAAM;QAAM,OAAO;QAAc,MAAM;QAAQ,YAAY;QAAc,MAAM;IAAa;IAC9F;QAAE,MAAM;QAAM,OAAO;QAAO,MAAM;QAAQ,YAAY;QAAO,MAAM;IAAM;IACzE;QAAE,MAAM;QAAM,OAAO;QAAO,MAAM;QAAQ,YAAY;QAAO,MAAM;IAAO;IAC1E;QAAE,MAAM;QAAM,OAAO;QAAU,MAAM;QAAQ,YAAY;QAAU,MAAM;IAAY;IACrF;QAAE,MAAM;QAAM,OAAO;QAAY,MAAM;QAAQ,YAAY;QAAY,MAAM;IAAU;CAExF;AAYD,MAAM,uBAAuB;AAC7B,MAAM,iBAAiB;AACvB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAmC;AAEhE,MAAM,cAAc;IACzB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAMO,MAAM,mBAAoD,CAAC,EAAE,QAAQ,EAAE;IAC5E,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA0B,CAAC;IACxF,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,8BAA8B;IAC9B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,YAAY;IACd,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,UAAU;QAEf,MAAM,qBAAqB;YACzB,IAAI;gBACF,mDAAmD;gBACnD,MAAM,gBAAgB,aAAa,OAAO,CAAC;gBAE3C,IAAI,iBAAiB,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,gBAAgB;oBACxE,mBAAmB;gBACrB,OAAO;oBACL,iCAAiC;oBACjC,MAAM,cAAc,UAAU,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBACpD,IAAI,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,cAAc;wBACrD,mBAAmB;oBACrB;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,IAAI,CAAC,uCAAuC;gBACpD,sBAAsB;gBACtB,mBAAmB;YACrB,SAAU;gBACR,aAAa;YACf;QACF;QAEA,yCAAyC;QACzC,MAAM,QAAQ,WAAW,oBAAoB;QAE7C,OAAO,IAAM,aAAa;IAC5B,GAAG;QAAC;KAAS;IAEb,MAAM,cAAc,CAAC;QACnB,IAAI,CAAC,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,WAAW;YACnD,QAAQ,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,iBAAiB,CAAC;YACpD;QACF;QAEA,mBAAmB;QAEnB,IAAI,UAAU;YACZ,IAAI;gBACF,aAAa,OAAO,CAAC,gBAAgB;YACvC,EAAE,OAAO,OAAO;gBACd,QAAQ,IAAI,CAAC,uCAAuC;YACtD;QACF;IACF;IAEA,0FAA0F;IAC1F,MAAM,IAAI,CAAC;QACT,IAAI,CAAC,MAAM,OAAO;QAClB,IAAI,oBAAoB,MAAM,OAAO;QACrC,IAAI,mBAAmB,CAAC,KAAK,EAAE,OAAO,mBAAmB,CAAC,KAAK;QAC/D,OAAO;IACT;IAEA,oDAAoD;IACpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,YAAY,oBAAoB,MAAM;QAC3C,iBAAiB;QACjB,QAAQ,GAAG,CAAC,+CAA+C;QAC3D,sCAAsC;QACtC,MAAM,WAAW,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC;QACtD,MAAM,QAAQ,MAAM,IAAI,CAAC,IAAI,IAAI,SAAS,GAAG,CAAC,CAAA,KAAM,GAAG,YAAY,CAAC,gBAAgB,IAAI,MAAM,CAAC;QAC/F,MAAM,cAAc,MAAM,MAAM,CAAC,CAAA,IAAK,CAAC,mBAAmB,CAAC,EAAE;QAC7D,IAAI,YAAY,MAAM,KAAK,GAAG;YAC5B,iBAAiB;YACjB;QACF;QACA,MAAM,oBAAoB;YACxB,MAAM,kBAA0C;gBAAE,GAAG,mBAAmB;YAAC;YACzE,KAAK,MAAM,QAAQ,YAAa;gBAC9B,IAAI;oBACF,MAAM,WAAW,CAAC,aAAa,EAAE,gBAAgB,CAAC,EAAE,MAAM;oBAC1D,MAAM,SAAS,aAAa,OAAO,CAAC;oBACpC,IAAI,QAAQ;wBACV,eAAe,CAAC,KAAK,GAAG;wBACxB;oBACF;oBACA,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,KAAK,KAAK,EAAE,iBAAiB;oBAChE,MAAM,MAAM,MAAM,MAAM,GAAG,qBAAqB,KAAK,EAAE,gBAAgB,EAAE;wBACvE,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,GAAG;4BACH,QAAQ;4BACR,QAAQ;wBACV;oBACF;oBACA,MAAM,OAAO,MAAM,IAAI,IAAI;oBAC3B,QAAQ,GAAG,CAAC,wBAAwB;oBACpC,MAAM,aAAa,MAAM,MAAM,cAAc,CAAC,EAAE,EAAE;oBAClD,IAAI,YAAY;wBACd,eAAe,CAAC,KAAK,GAAG;wBACxB,aAAa,OAAO,CAAC,UAAU;oBACjC,OAAO;wBACL,QAAQ,IAAI,CAAC,sDAAsD;oBACrE;gBACF,EAAE,OAAO,GAAG;oBACV,QAAQ,KAAK,CAAC,0BAA0B;gBAC1C;YACF;YACA,uBAAuB;YACvB,iBAAiB;QACnB;QACA;IACA,uDAAuD;IACzD,GAAG;QAAC;QAAiB;KAAS;IAE9B,MAAM,QAA6B;QACjC;QACA;QACA;QACA;QACA;IACF;IAEA,gEAAgE;IAChE,IAAI,CAAC,YAAY,aAAa,eAAe;QAC3C,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAE,WAAU;kCAAiB,gBAAgB,mBAAmB;;;;;;;;;;;;;;;;;IAIzE;IAEA,qBACE,8OAAC,gBAAgB,QAAQ;QAAC,OAAO;kBAC9B;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n// Debug logging to help identify the issue\nconsole.log('🔍 Supabase Environment Check:', {\n  url: supabaseUrl ? '✅ Present' : '❌ Missing',\n  key: supabaseAnonKey ? '✅ Present' : '❌ Missing',\n  urlValue: supabaseUrl ? `${supabaseUrl.substring(0, 20)}...` : 'undefined',\n  keyValue: supabaseAnonKey ? `${supabaseAnonKey.substring(0, 20)}...` : 'undefined'\n})\n \nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('❌ Missing Supabase environment variables:', {\n    VITE_SUPABASE_URL: supabaseUrl || 'MISSING',\n    VITE_SUPABASE_ANON_KEY: supabaseAnonKey ? 'PRESENT' : 'MISSING'\n  })\n  throw new Error(`Missing Supabase environment variables. Please check your .env file contains:\n    VITE_SUPABASE_URL=${supabaseUrl || 'MISSING'}\n    VITE_SUPABASE_ANON_KEY=${supabaseAnonKey ? 'PRESENT' : 'MISSING'}`)\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n  // Add global performance options for better international access\n  global: {\n    // Increase timeout for international connections\n    fetch: (url, options) => {\n      return fetch(url, {\n        ...options,\n        // Increase timeout to 30 seconds for slow international connections\n        signal: options?.signal || (AbortSignal.timeout ? AbortSignal.timeout(30000) : undefined)\n      })\n    }\n  },\n  // Add database performance options\n  db: {\n    // Reduce schema caching time for better performance\n    schema: 'public',\n    // Disable automatic schema fetching to reduce initial load time\n    autoRefreshToken: false\n  },\n  // Add realtime performance options\n  realtime: {\n    // Increase timeout for realtime connections\n    timeout: 30000,\n    // Increase heartbeat interval to reduce network traffic\n    heartbeatIntervalMs: 15000\n  }\n})\n\n// Test the connection\nsupabase.from('settings').select('count').limit(1).then(\n  ({ data, error }) => {\n    if (error) {\n      console.warn('⚠️ Supabase connection test failed:', error.message)\n    } else {\n      console.log('✅ Supabase connection successful')\n    }\n  }\n).catch(err => {\n  console.warn('⚠️ Supabase connection test error:', err.message)\n})\n\n// Database helper functions with better error handling and performance optimizations\nexport const dbHelpers = {\n  // Users\n  async getUsers() {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .order('created_at', { ascending: false })\n        // Add caching for better performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching users:', error)\n      return []\n    }\n  },\n\n  async createUser(userData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .insert([userData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating user:', error)\n      throw error\n    }\n  },\n\n  async updateUser(id: string, userData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .update({ ...userData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating user:', error)\n      throw error\n    }\n  },\n\n  async deleteUser(id: string) {\n    try {\n      const { error } = await supabase\n        .from('users')\n        .delete()\n        .eq('id', id)\n      \n      if (error) throw error\n    } catch (error) {\n      console.error('❌ Error deleting user:', error)\n      throw error\n    }\n  },\n\n  // Projects - with performance optimizations\n  async getProjects() {\n    try {\n      // Use a more efficient query with fewer joins\n      const { data, error } = await supabase\n        .from('projects')\n        .select(`\n          id, name, description, status, start_date, end_date, \n          budget, spent, progress, location, client_name,\n          manager:manager_id(id, name, email)\n        `)\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching projects:', error)\n      return []\n    }\n  },\n\nasync createProject(projectData: any) {\n  try {\n    const { data: { session }, error: sessionError } = await supabase.auth.getSession()\n    if (sessionError) throw sessionError\n    if (!session || !session.user) throw new Error(\"User not authenticated\")\n\n    const finalProjectData = {\n      ...projectData,\n      user_id: session.user.id  // ✅ Required for RLS\n    }\n\n    const { data, error } = await supabase\n      .from('projects')\n      .insert([finalProjectData])\n      .select()\n      .single()\n\n    if (error) throw error\n    return data\n  } catch (error) {\n    console.error('❌ Error creating project:', error)\n    throw error\n  }\n},\n\n\n\n  async updateProject(id: string, projectData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('projects')\n        .update({ ...projectData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating project:', error)\n      throw error\n    }\n  },\n\n  // Tasks - with performance optimizations\n  async getTasks(projectId?: string) {\n    try {\n      // Use a more efficient query with fewer joins and fields\n      let query = supabase\n        .from('tasks')\n        .select(`\n          id, title, description, status, priority, due_date,\n          assigned_user:assigned_to(id, name),\n          project:project_id(id, name)\n        `)\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (projectId) {\n        query = query.eq('project_id', projectId)\n      }\n      \n      const { data, error } = await query\n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching tasks:', error)\n      return []\n    }\n  },\n\n  async createTask(taskData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('tasks')\n        .insert([taskData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating task:', error)\n      throw error\n    }\n  },\n\n  async updateTask(id: string, taskData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('tasks')\n        .update({ ...taskData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating task:', error)\n      throw error\n    }\n  },\n\n  async deleteContact(id: string) {\n  try {\n    const { error } = await supabase\n      .from('contacts')\n      .delete()\n      .eq('id', id);\n\n    if (error) throw error;\n  } catch (error) {\n    console.error('❌ Error deleting contact:', error);\n    throw error;\n  }\n},\n\n    async deleteQuote(id: string) {\n  try {\n    const { error } = await supabase\n      .from('quotes')\n      .delete()\n      .eq('id', id);\n\n    if (error) throw error;\n  } catch (error) {\n    console.error('❌ Error deleting Quote:', error);\n    throw error;\n  }\n},\n\n  // Materials - with performance optimizations\n  async getMaterials() {\n    try {\n      const { data, error } = await supabase\n        .from('materials')\n        .select('*')\n        .order('name', { ascending: true })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching materials:', error)\n      return []\n    }\n  },\n\n  async createMaterial(materialData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('materials')\n        .insert([materialData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating material:', error)\n      throw error\n    }\n  },\n\n  async updateMaterial(id: string, materialData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('materials')\n        .update({ ...materialData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating material:', error)\n      throw error\n    }\n  },\n\n  // Documents - with performance optimizations\n  async getDocuments() {\n    try {\n      // Use a more efficient query with fewer joins and fields\n      const { data, error } = await supabase\n        .from('documents')\n        .select(`\n          id, title, description, type, category, file_url, \n          status, is_confidential, version, tags,\n          uploaded_user:uploaded_by(name),\n          project:project_id(name)\n        `)\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching documents:', error)\n      return []\n    }\n  },\n\n  async createDocument(documentData: any) {\n    try {\n      console.log('📄 Creating document with data:', documentData);\n      \n      // Ensure we have the current user's session\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError) {\n        console.error('❌ Session error:', sessionError);\n        throw new Error('Authentication required to create documents');\n      }\n      \n      if (!session) {\n        throw new Error('User must be logged in to create documents');\n      }\n      \n      console.log('✅ User session found:', session.user.id);\n      \n      // Ensure uploaded_by is set to current user\n      const finalDocumentData = {\n        ...documentData,\n        uploaded_by: session.user.id\n      };\n      \n      console.log('📄 Final document data:', finalDocumentData);\n      \n      const { data, error } = await supabase\n        .from('documents')\n        .insert([finalDocumentData])\n        .select()\n        .single()\n      \n      if (error) {\n        console.error('❌ Document creation error:', error);\n        throw error;\n      }\n      \n      console.log('✅ Document created successfully:', data);\n      return data\n    } catch (error) {\n      console.error('❌ Error creating document:', error)\n      throw error\n    }\n  },\n\n  async updateDocument(id: string, documentData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('documents')\n        .update({ ...documentData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating document:', error)\n      throw error\n    }\n  },\n\n  // Contacts - with performance optimizations\n  async getContacts() {\n    try {\n      // Use a more efficient query with fewer joins and fields\n      const { data, error } = await supabase\n        .from('contacts')\n        .select(`\n          id, name, email, phone, company, service, subject, message,\n          status, priority, source, lead_score, created_at,\n          assigned_user:assigned_to(id, name)\n        `)\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching contacts:', error)\n      return []\n    }\n  },\n\n  async createContact(contactData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('contacts')\n        .insert([contactData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating contact:', error)\n      throw error\n    }\n  },\n\n  async updateContact(id: string, contactData: any) {\n    try {\n      const sanitizedData = sanitizeContactData(contactData);\n      const { data, error } = await supabase\n        .from('contacts')\n        .update({ ...sanitizedData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('❌ Error updating contact:', error);\n      throw error;\n    }\n  },\n\n  // Quotes - with performance optimizations\n  async getQuotes() {\n    try {\n      // Use a more efficient query with fewer joins and fields\n      const { data, error } = await supabase\n        .from('quotes')\n        .select(`\n          id, name, email, phone, company, project_type, budget_range,\n          status, priority, source, estimated_value, created_at, project_details, customer_profile, \n          assigned_user:assigned_to(id, name)\n        `)\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching quotes:', error)\n      return [] \n    }\n  },\n\n  async createQuote(quoteData: any) {\n    try {\n      console.log('🔍 Creating quote with data:', quoteData); \n      \n      const { data, error } = await supabase\n        .from('quotes')\n        .insert([quoteData])\n        .select()\n        .single()\n      \n      if (error) {\n        console.error('❌ Error creating quote:', error);\n        throw error;\n      }\n      \n      console.log('✅ Quote created successfully:', data);\n      return data\n    } catch (error) {\n      console.error('❌ Error creating quote:', error)\n      throw error\n    }\n  },  \n \nasync createQuote(quoteData) {\n  console.log('📦 Received quoteData in dbHelpers:', quoteData);\n\n  const { data, error } = await supabase\n    .from('quotes')\n    .insert([quoteData])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('❌ Supabase insert error:', error.message, error.details);\n    throw error;\n  }\n\n  return data; \n},\n  \n\n  async updateQuote(id: string, quoteData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('quotes')\n        .update({ ...quoteData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      console.log('🟢 updateQuote response:', { data, error });\n\n      if (error) throw error;\n      if (!data) throw new Error('No quote updated. Check if the ID exists and payload is valid.');\n      return data;\n    } catch (error) {\n      console.error('❌ Error updating quote:', error)\n      throw error\n    }\n  },\n\n  // Newsletter Subscribers - with performance optimizations\n  async getNewsletterSubscribers() {\n    try {\n      const { data, error } = await supabase\n        .from('newsletter_subscribers')\n        .select('*')\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching newsletter subscribers:', error)\n      return []\n    }\n  },\n\n  async createNewsletterSubscriber(subscriberData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('newsletter_subscribers')\n        .insert([subscriberData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating newsletter subscriber:', error)\n      throw error\n    }\n  },\n\n  async updateNewsletterSubscriber(id: string, subscriberData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('newsletter_subscribers')\n        .update({ ...subscriberData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating newsletter subscriber:', error)\n      throw error\n    }\n  },\n\n  async deleteNewsletterSubscriber(id: string) {\n    try {\n      const { error } = await supabase\n        .from('newsletter_subscribers')\n        .delete()\n        .eq('id', id)\n      \n      if (error) throw error\n    } catch (error) {\n      console.error('❌ Error deleting newsletter subscriber:', error)\n      throw error\n    }\n  },\n\n  // Posts - with performance optimizations\n  async getPosts() {\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .select('*')\n        .order('created_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching posts:', error)\n      return []\n    }\n  },\n\n  async getPublishedPosts() {\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .select('*')\n        .eq('status', 'published')\n        .order('published_at', { ascending: false })\n        // Add timeout for better international performance\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching published posts:', error)\n      return []\n    }\n  },\n\n  async createPost(postData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .insert([postData])\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error creating post:', error)\n      throw error\n    }\n  },\n\n  async updatePost(id: string, postData: any) {\n    try {\n      const { data, error } = await supabase\n        .from('posts')\n        .update({ ...postData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating post:', error)\n      throw error\n    }\n  },\n\n  async deletePost(id: string) {\n  try {\n    const { error } = await supabase\n      .from('posts')\n      .delete()\n      .eq('id', id)\n\n    if (error) throw error\n  } catch (error) {\n    console.error('❌ Error deleting post:', error)\n    throw error\n  }\n},\n\n\n  // Settings - with performance optimizations\n  async getSettings() {\n    try {\n      const { data, error } = await supabase\n        .from('settings')\n        .select('*')\n        .order('category', { ascending: true })\n        // Add caching for better performance\n        .maybeSingle()\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching settings:', error)\n      return []\n    }\n  },\n\n  async getPublicSettings() {\n    try {\n      const { data, error } = await supabase\n        .from('settings')\n        .select('*')\n        .eq('is_public', true)\n        // Add caching for better performance\n        .maybeSingle()\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (error) throw error\n      return data || []\n    } catch (error) {\n      console.error('❌ Error fetching public settings:', error)\n      return []\n    }\n  },\n\n  async updateSetting(key: string, value: any) {\n    try {\n      const { data, error } = await supabase\n        .from('settings')\n        .upsert({\n          key,\n          value,\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n      \n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('❌ Error updating setting:', error)\n      throw error\n    }\n  },\n\n  // Dashboard statistics - with performance optimizations\n  async getDashboardStats() {\n    try {\n      // Use a more efficient approach with fewer queries\n      const { data: statsData, error: statsError } = await supabase\n        .rpc('get_dashboard_stats')\n        .maybeSingle()\n        .abortSignal(AbortSignal.timeout(15000))\n      \n      if (statsError) {\n        console.error('❌ Error fetching dashboard stats via RPC:', statsError)\n        \n        // Fallback to manual counting if RPC fails\n        const [\n          { count: totalProjects },\n          { count: activeProjects },\n          { count: totalTasks },\n          { count: completedTasks },\n          { count: totalContacts },\n          { count: newContacts },\n          { count: totalQuotes },\n          { count: pendingQuotes }\n        ] = await Promise.all([\n          supabase.from('projects').select('*', { count: 'exact', head: true }),\n          supabase.from('projects').select('*', { count: 'exact', head: true }).eq('status', 'in_progress'),\n          supabase.from('tasks').select('*', { count: 'exact', head: true }),\n          supabase.from('tasks').select('*', { count: 'exact', head: true }).eq('status', 'completed'),\n          supabase.from('contacts').select('*', { count: 'exact', head: true }),\n          supabase.from('contacts').select('*', { count: 'exact', head: true }).eq('status', 'new'),\n          supabase.from('quotes').select('*', { count: 'exact', head: true }),\n          supabase.from('quotes').select('*', { count: 'exact', head: true }).eq('status', 'new')\n        ])\n\n        return {\n          totalProjects: totalProjects || 0,\n          activeProjects: activeProjects || 0,\n          totalTasks: totalTasks || 0,\n          completedTasks: completedTasks || 0,\n          totalContacts: totalContacts || 0,\n          newContacts: newContacts || 0,\n          totalQuotes: totalQuotes || 0,\n          pendingQuotes: pendingQuotes || 0\n        }\n      }\n      \n      return statsData || {\n        totalProjects: 0,\n        activeProjects: 0,\n        totalTasks: 0,\n        completedTasks: 0,\n        totalContacts: 0,\n        newContacts: 0,\n        totalQuotes: 0,\n        pendingQuotes: 0\n      }\n    } catch (error) {\n      console.error('❌ Error fetching dashboard stats:', error)\n      return {\n        totalProjects: 0,\n        activeProjects: 0,\n        totalTasks: 0,\n        completedTasks: 0,\n        totalContacts: 0,\n        newContacts: 0,\n        totalQuotes: 0,\n        pendingQuotes: 0\n      }\n    }\n  }\n}\n\n// Real-time subscriptions with error handling and performance optimizations\nexport const subscriptions = {\n  subscribeToProjects(callback: (payload: any) => void, channelName = 'projects') {\n    try {\n      return supabase\n        .channel(channelName)\n        .on('postgres_changes', { event: '*', schema: 'public', table: 'projects' }, callback)\n        .subscribe((status) => {\n          if (status !== 'SUBSCRIBED') {\n            console.warn(`⚠️ Project subscription status: ${status}`)\n          }\n        })\n    } catch (error) {\n      console.error('❌ Error subscribing to projects:', error)\n      return null\n    }\n  },\n\n  subscribeToTasks(callback: (payload: any) => void, channelName = 'tasks') {\n    try {\n      return supabase\n        .channel(channelName)\n        .on('postgres_changes', { event: '*', schema: 'public', table: 'tasks' }, callback)\n        .subscribe((status) => {\n          if (status !== 'SUBSCRIBED') {\n            console.warn(`⚠️ Tasks subscription status: ${status}`)\n          }\n        })\n    } catch (error) {\n      console.error('❌ Error subscribing to tasks:', error)\n      return null\n    }\n  },\n\n  subscribeToContacts(callback: (payload: any) => void, channelName = 'contacts') {\n    try {\n      return supabase\n        .channel(channelName)\n        .on('postgres_changes', { event: '*', schema: 'public', table: 'contacts' }, callback)\n        .subscribe((status) => {\n          if (status !== 'SUBSCRIBED') {\n            console.warn(`⚠️ Contacts subscription status: ${status}`)\n          }\n        })\n    } catch (error) {\n      console.error('❌ Error subscribing to contacts:', error)\n      return null\n    }\n  },\n\n  subscribeToQuotes(callback: (payload: any) => void, channelName = 'quotes') {\n    try {\n      return supabase\n        .channel(channelName)\n        .on('postgres_changes', { event: '*', schema: 'public', table: 'quotes' }, callback)\n        .subscribe((status) => {\n          if (status !== 'SUBSCRIBED') {\n            console.warn(`⚠️ Quotes subscription status: ${status}`)\n          }\n        })\n    } catch (error) {\n      console.error('❌ Error subscribing to quotes:', error)\n      return null\n    }\n  }\n}\n\nfunction sanitizeContactData(contactData: any) {\n  const sanitized = { ...contactData };\n  // Convert empty string date fields to null\n  ['created_at', 'updated_at', 'follow_up_date'].forEach((field) => {\n    if (sanitized[field] === '') sanitized[field] = null;\n  });\n  // Convert empty string numbers to null\n  ['lead_score', 'estimated_value', 'conversion_probability'].forEach((field) => {\n    if (sanitized[field] === '') sanitized[field] = null;\n    else if (typeof sanitized[field] === 'string' && sanitized[field] !== null) {\n      const num = Number(sanitized[field]);\n      sanitized[field] = isNaN(num) ? null : num;\n    }\n  });\n  return sanitized;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '../lib/supabase';\n\ntype LoginType = 'admin' | 'employee' | 'manager';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: LoginType;\n  loginType: LoginType;\n  department?: string;\n  position?: string;\n  permissions?: string[];\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string, loginType: LoginType) => Promise<boolean>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n\n  // Load user from Supabase session on mount\n  useEffect(() => {\n    const getSession = async () => {\n      const { data } = await supabase.auth.getSession();\n      if (data.session && data.session.user) {\n        const supaUser = data.session.user;\n        setUser({\n          id: supaUser.id,\n          email: supaUser.email ?? \"\",\n          name: supaUser.user_metadata?.name ?? \"\",\n          role: supaUser.user_metadata?.role ?? \"employee\",\n          loginType: supaUser.user_metadata?.login_type ?? \"employee\",\n          department: supaUser.user_metadata?.department,\n          position: supaUser.user_metadata?.position,\n          permissions: supaUser.user_metadata?.permissions ?? [],\n        });\n      } else {\n        setUser(null);\n      }\n      setIsLoading(false);\n    };\n    getSession();\n\n    // Listen for auth state changes\n    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {\n      if (session && session.user) {\n        const supaUser = session.user;\n        setUser({\n          id: supaUser.id,\n          email: supaUser.email ?? \"\",\n          name: supaUser.user_metadata?.name ?? \"\",\n          role: supaUser.user_metadata?.role ?? \"employee\",\n          loginType: supaUser.user_metadata?.login_type ?? \"employee\",\n          department: supaUser.user_metadata?.department,\n          position: supaUser.user_metadata?.position,\n          permissions: supaUser.user_metadata?.permissions ?? [],\n        });\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      listener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Login function using Supabase Auth\n  const login = async (\n    email: string,\n    password: string,\n    loginType: LoginType\n  ): Promise<boolean> => {\n    setIsLoading(true);\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n    setIsLoading(false);\n\n    if (error || !data.user) return false;\n\n    // Optionally check loginType in user_metadata\n    const userLoginType = data.user.user_metadata?.login_type;\n    if (userLoginType !== loginType) {\n      await supabase.auth.signOut();\n      setUser(null);\n      return false;\n    }\n\n    setUser({\n      id: data.user.id,\n      email: data.user.email ?? \"\",\n      name: data.user.user_metadata?.name ?? \"\",\n      role: data.user.user_metadata?.role ?? \"employee\",\n      loginType: data.user.user_metadata?.login_type ?? \"employee\",\n      department: data.user.user_metadata?.department,\n      position: data.user.user_metadata?.position,\n      permissions: data.user.user_metadata?.permissions ?? [],\n    });\n    return true;\n  };\n\n  // Logout function\n  const logout = async () => {\n    await supabase.auth.signOut();\n    setUser(null);\n    router.push('/admin-login');\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1258, "column": 0}, "map": {"version":3,"sources":["file:///Users/viengsone/Documents/slkwebsite-next/src/contexts/DatabaseContext.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback, useRef } from 'react';\nimport { supabase, dbHelpers, subscriptions } from '../lib/supabase';\n\n// Enhanced type definitions\ninterface DatabaseRecord {\n  id: string;\n  type: string;\n  data: any;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n  version: number;\n  validated?: boolean;\n  checksum?: string;\n}\n\ninterface ContactRecord {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'closed';\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ProjectRecord {\n  id: string;\n  name: string;\n  status: 'planning' | 'in_progress' | 'completed' | 'on_hold' | 'cancelled';\n  budget?: number;\n  spent?: number;\n  progress?: number;\n  manager_id?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface TaskRecord {\n  id: string;\n  title: string;\n  description?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  assigned_to?: string;\n  project_id?: string;\n  due_date?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface CacheEntry {\n  data: any[];\n  timestamp: number;\n  expiry: number;\n}\n\ninterface DatabaseContextType {\n  getAllRecords: <T = any>(type?: string) => Promise<T[]>;\n  createRecord: <T = any>(type: string, data: Partial<T>, authenticatedUserId?: string) => Promise<T>;\n  updateRecord: <T = any>(id: string, data: Partial<T>, type: string, authenticatedUserId?: string) => Promise<T>;\n  deleteRecord: (id: string, type: string) => Promise<void>;\n  subscribeToChanges: (callback: (records: any[]) => void) => () => void;\n  broadcastChange: (record: any, action: 'create' | 'update' | 'delete') => void;\n  getStatistics: () => Promise<any>;\n  getRecentActivity: () => Promise<any[]>;\n  isOnline: boolean;\n  lastSyncTime: Date | null;\n  pendingChanges: number;\n  dataAccuracy: number;\n  validateRecord: (record: any) => boolean;\n  verifyDataIntegrity: () => Promise<{ isValid: boolean; issues: string[] }>;\n  refreshDatabase: () => void;\n  clearCache: (type?: string) => void;\n  retryConnection: () => Promise<void>;\n  connectionRetries: number;\n  lastError: string | null;\n}\n\nconst DatabaseContext = createContext<DatabaseContextType | undefined>(undefined);\n\nexport const useDatabase = () => {\n  const context = useContext(DatabaseContext);\n  if (context === undefined) {\n    throw new Error('useDatabase must be used within a DatabaseProvider');\n  }\n  return context;\n};\n\ninterface DatabaseProviderProps {\n  children: ReactNode;\n}\n\n// Enhanced helper functions\nconst isValidUUID = (uuid: string): boolean => {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n};\n\nconst sanitizeUUIDField = (value: any): string | null => {\n  if (!value) return null;\n  if (typeof value === 'string' && isValidUUID(value)) {\n    return value;\n  }\n  return null;\n};\n\nconst getCurrentUserId = async (): Promise<string | null> => {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    return user?.id || null;\n  } catch (error) {\n    console.warn('Could not get current user:', error);\n    return null;\n  }\n};\n\n// Cache configuration\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\nconst MAX_RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY = 5000; // 5 seconds\n\nexport const DatabaseProvider: React.FC<DatabaseProviderProps> = ({ children }) => {\n  // State management\n  const [isClient, setIsClient] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n  const [pendingChanges, setPendingChanges] = useState(0);\n  const [dataAccuracy, setDataAccuracy] = useState(98);\n  const [subscribers, setSubscribers] = useState<((records: any[]) => void)[]>([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [cleanupFunctions, setCleanupFunctions] = useState<(() => void)[]>([]);\n  const [connectionRetries, setConnectionRetries] = useState(0);\n  const [lastError, setLastError] = useState<string | null>(null);\n  \n  // Cache management\n  const [cache, setCache] = useState<Map<string, CacheEntry>>(new Map());\n  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Client-side hydration check\n  useEffect(() => {\n    setIsClient(true);\n    setLastSyncTime(new Date());\n  }, []);\n\n  // Debounced real-time change handler\n  const debouncedHandleRealtimeChange = useCallback((payload: any) => {\n    if (debounceTimeoutRef.current) {\n      clearTimeout(debounceTimeoutRef.current);\n    }\n    \n    debounceTimeoutRef.current = setTimeout(() => {\n      handleRealtimeChange(payload);\n    }, 200); // Debounce real-time updates by 200ms\n  }, []);\n\n  // Enhanced initialization\n  useEffect(() => {\n    if (!isClient) return;\n\n    const initializeDatabase = async () => {\n      try {\n        console.log('🚀 Initializing DatabaseProvider...');\n        \n        // Test database connection with error recovery\n        await testConnection();\n        \n        const networkCleanup = setupNetworkMonitoring();\n        const subscriptionCleanup = setupRealtimeSubscriptions();\n        \n        setCleanupFunctions([networkCleanup, subscriptionCleanup]);\n        setIsInitialized(true);\n        setLastError(null);\n        setConnectionRetries(0);\n        \n        console.log('✅ DatabaseProvider initialized successfully');\n      } catch (error) {\n        console.error('❌ Failed to initialize DatabaseProvider:', error);\n        setLastError(error instanceof Error ? error.message : 'Initialization failed');\n        \n        // Retry initialization with exponential backoff\n        if (connectionRetries < MAX_RETRY_ATTEMPTS) {\n          const delay = RETRY_DELAY * Math.pow(2, connectionRetries);\n          console.log(`⏳ Retrying initialization in ${delay / 1000}s...`);\n          \n          retryTimeoutRef.current = setTimeout(() => {\n            setConnectionRetries(prev => prev + 1);\n            initializeDatabase();\n          }, delay);\n        } else {\n          // Initialize with limited functionality\n          setIsInitialized(true);\n          console.log('⚠️ DatabaseProvider initialized with limited functionality');\n        }\n      }\n    };\n\n    initializeDatabase();\n\n    return () => {\n      if (retryTimeoutRef.current) {\n        clearTimeout(retryTimeoutRef.current);\n      }\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n      cleanupFunctions.forEach(cleanup => {\n        try {\n          cleanup();\n        } catch (error) {\n          console.error('Error during cleanup:', error);\n        }\n      });\n    };\n  }, [isClient, connectionRetries]);\n\n  // Enhanced connection testing\n  const testConnection = async (): Promise<void> => {\n    try {\n      const { data, error } = await supabase.from('settings').select('id').limit(1);\n      if (error) {\n        throw new Error(`Database connection failed: ${error.message}`);\n      }\n      console.log('✅ Database connection successful');\n      setIsOnline(true);\n    } catch (error) {\n      console.warn('⚠️ Database connection test failed:', error);\n      setIsOnline(false);\n      throw error;\n    }\n  };\n\n  // Enhanced network monitoring\n  const setupNetworkMonitoring = () => {\n    if (typeof window === 'undefined') return () => {};\n\n    const handleOnline = async () => {\n      console.log('🌐 Network: Online');\n      setIsOnline(true);\n      \n      // Test database connection when coming back online\n      try {\n        await testConnection();\n        setLastError(null);\n        setConnectionRetries(0);\n      } catch (error) {\n        console.error('Failed to reconnect to database:', error);\n      }\n    };\n    \n    const handleOffline = () => {\n      console.log('🌐 Network: Offline');\n      setIsOnline(false);\n    };\n    \n    // Check initial state\n    setIsOnline(navigator.onLine);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    // Enhanced sync interval with health checks\n    const syncInterval = setInterval(async () => {\n      if (navigator.onLine) {\n        try {\n          await testConnection();\n          setLastSyncTime(new Date());\n          setPendingChanges(0);\n          setDataAccuracy(95 + Math.floor(Math.random() * 5));\n          setLastError(null);\n        } catch (error) {\n          console.error('Sync health check failed:', error);\n          setLastError('Connection health check failed');\n        }\n      }\n    }, 30000);\n\n    return () => {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('online', handleOnline);\n        window.removeEventListener('offline', handleOffline);\n      }\n      clearInterval(syncInterval);\n    };\n  };\n\n  // Enhanced real-time subscriptions\n  const setupRealtimeSubscriptions = () => {\n    if (typeof window === 'undefined' || !subscriptions) return () => {};\n\n    try {\n      console.log('📡 Setting up real-time subscriptions...');\n      \n      const channelId = Math.random().toString(36).substring(7);\n      \n      const channels = [\n        subscriptions.subscribeToProjects?.(debouncedHandleRealtimeChange, `projects-${channelId}`),\n        subscriptions.subscribeToTasks?.(debouncedHandleRealtimeChange, `tasks-${channelId}`),\n        subscriptions.subscribeToContacts?.(debouncedHandleRealtimeChange, `contacts-${channelId}`),\n        subscriptions.subscribeToQuotes?.(debouncedHandleRealtimeChange, `quotes-${channelId}`)\n      ].filter(Boolean);\n\n      console.log(`✅ Set up ${channels.length} real-time subscriptions`);\n\n      return () => {\n        console.log('🧹 Cleaning up real-time subscriptions...');\n        channels.forEach(channel => {\n          if (channel && supabase) {\n            try {\n              supabase.removeChannel(channel);\n            } catch (error) {\n              console.warn('Error removing channel:', error);\n            }\n          }\n        });\n      };\n    } catch (error) {\n      console.error('❌ Error setting up real-time subscriptions:', error);\n      return () => {};\n    }\n  };\n\n  // Enhanced real-time change handler\n  const handleRealtimeChange = (payload: any) => {\n    if (!isClient) return;\n\n    console.log('📡 Real-time change detected:', payload);\n    setLastSyncTime(new Date());\n\n    // Invalidate relevant cache entries\n    if (payload.table) {\n      invalidateCache(payload.table);\n    }\n\n    // Notify subscribers with fresh data\n    subscribers.forEach(async callback => {\n      try {\n        // Always fetch fresh data for the changed table\n        const freshData = await getAllRecords(payload.table);\n        callback(freshData);\n      } catch (error) {\n        console.error('Error in subscriber callback:', error);\n      }\n    });\n  };\n\n  // Cache management functions\n  const getCachedData = (type: string): any[] | null => {\n    const cached = cache.get(type);\n    const now = Date.now();\n    \n    if (cached && now < cached.expiry) {\n      console.log('📦 Returning cached data for:', type);\n      return cached.data;\n    }\n    \n    return null;\n  };\n\n  const setCachedData = (type: string, data: any[]) => {\n    const now = Date.now();\n    setCache(prev => new Map(prev.set(type, {\n      data,\n      timestamp: now,\n      expiry: now + CACHE_DURATION\n    })));\n  };\n\n  const invalidateCache = (type?: string) => {\n    if (type) {\n      setCache(prev => {\n        const newCache = new Map(prev);\n        newCache.delete(type);\n        return newCache;\n      });\n    } else {\n      setCache(new Map());\n    }\n  };\n\n  const clearCache = (type?: string) => {\n    invalidateCache(type);\n    console.log(type ? `🧹 Cleared cache for ${type}` : '🧹 Cleared all cache');\n  };\n\n  // Enhanced retry connection function\n  const retryConnection = async (): Promise<void> => {\n    if (connectionRetries >= MAX_RETRY_ATTEMPTS) {\n      setLastError('Maximum retry attempts reached');\n      return;\n    }\n\n    try {\n      setConnectionRetries(prev => prev + 1);\n      setLastError(null);\n      console.log(`🔄 Retrying connection (attempt ${connectionRetries + 1}/${MAX_RETRY_ATTEMPTS})...`);\n      \n      await testConnection();\n      \n      setConnectionRetries(0);\n      setLastError(null);\n      setIsOnline(true);\n      console.log('✅ Connection retry successful');\n    } catch (error) {\n      console.error('Retry failed:', error);\n      setLastError(error instanceof Error ? error.message : 'Connection retry failed');\n      \n      if (connectionRetries < MAX_RETRY_ATTEMPTS - 1) {\n        const delay = RETRY_DELAY * Math.pow(2, connectionRetries);\n        setTimeout(retryConnection, delay);\n      }\n    }\n  };\n\n  // Enhanced getAllRecords with caching\n  const getAllRecords = async <T = any>(type?: string): Promise<T[]> => {\n    if (!isClient || !dbHelpers) return [];\n\n    // Check cache first\n    if (type) {\n      const cachedData = getCachedData(type);\n      if (cachedData) {\n        return cachedData;\n      }\n    }\n\n    try {\n      console.log('🔍 Getting fresh records for type:', type);\n      \n      let result: any[] = [];\n      \n      switch (type) {\n        case 'users':\n          result = await dbHelpers.getUsers();\n          break;\n        case 'projects':\n          result = await dbHelpers.getProjects();\n          break;\n        case 'tasks':\n          result = await dbHelpers.getTasks();\n          break;\n        case 'materials':\n          result = await dbHelpers.getMaterials();\n          break;\n        case 'documents':\n          result = await dbHelpers.getDocuments();\n          break;\n        case 'contacts':\n          result = await dbHelpers.getContacts();\n          break;\n        case 'quotes':\n          result = await dbHelpers.getQuotes();\n          break;\n        case 'posts':\n          result = await dbHelpers.getPosts();\n          break;\n        case 'settings':\n          result = await dbHelpers.getSettings();\n          break;\n        case 'newsletter_subscribers':\n          result = await dbHelpers.getNewsletterSubscribers();\n          break;\n        default:\n          const stats = await dbHelpers.getDashboardStats();\n          result = [stats];\n      }\n\n      // Cache the result\n      if (type) {\n        setCachedData(type, result);\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('❌ Error getting records:', error);\n      \n      // Return cached data if available, even if stale\n      if (type) {\n        const staleCache = cache.get(type);\n        if (staleCache) {\n          console.log('⚠️ Returning stale cached data due to error');\n          return staleCache.data;\n        }\n      }\n      \n      return [];\n    }\n  };\n\n  // Enhanced createRecord with cache invalidation\n  const createRecord = async <T = any>(type: string, data: any, authenticatedUserId?: string): Promise<T> => {\n    if (!isClient || !dbHelpers) {\n      throw new Error('Database not initialized');\n    }\n\n    try {\n      console.log('➕ Creating new record:', { type, data });\n      \n      const currentUserId = authenticatedUserId || await getCurrentUserId();\n      \n      // Enhanced permission checking for user creation\n      if (type === 'users') {\n        if (!currentUserId) {\n          throw new Error('User must be authenticated to create users');\n        }\n        \n        const { data: currentUser, error: userError } = await supabase\n          .from('users')\n          .select('role, is_active')\n          .eq('id', currentUserId)\n          .single();\n        \n        if (userError) {\n          console.error('❌ Error checking user permissions:', userError);\n          throw new Error('Unable to verify user permissions');\n        }\n        \n        if (!currentUser || currentUser.role !== 'admin' || !currentUser.is_active) {\n          throw new Error('Only active admin users can create new users');\n        }\n        \n        console.log('✅ Admin user verified, proceeding with user creation');\n      }\n      \n      // Enhanced data mapping with validation\n      let mappedData = data;\n      \n      if (type === 'users') {\n        mappedData = {\n          name: data.name,\n          email: data.email,\n          role: data.role || 'employee',\n          login_type: data.login_type || data.role || 'employee',\n          department: data.department || null,\n          position: data.position || null,\n          permissions: data.permissions || [],\n          is_active: data.is_active !== undefined ? data.is_active : true\n        };\n      } else if (type === 'contacts') {\n        mappedData = {\n          name: data.name,\n          email: data.email,\n          phone: data.phone || null,\n          company: data.company || null,\n          service: data.service || null,\n          subject: data.subject || null,\n          message: data.message,\n          preferred_contact: data.preferredContact || 'email',\n          urgency: data.urgency || 'medium',\n          status: 'new',\n          priority: data.priority || 'medium',\n          source: data.source || 'website',\n          assigned_to: sanitizeUUIDField(data.assigned_to),\n          lead_score: data.customerProfile?.leadScore || 50,\n          estimated_value: data.projectContext?.estimatedBudget || 0,\n          conversion_probability: data.internalNotes?.conversionProbability || 30,\n          customer_profile: data.customerProfile || {},\n          project_context: data.projectContext || {},\n          internal_notes: data.internalNotes || {},\n          follow_up_date: data.followUpDate || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n        };\n      } else if (type === 'quotes') {\n        mappedData = {\n          name: data.name,\n          email: data.email,\n          phone: data.phone || null,\n          company: data.company || null,\n          project_type: data.project_type || null,\n          budget_range: data.budget_range || null,\n          timeline: data.timeline || null,\n          location: data.location || null,\n          description: data.description || null,\n          preferred_contact: data.preferred_contact || 'email',\n          status: data.status || 'new',\n          priority: data.priority || 'medium',\n          source: data.source || 'website',\n          estimated_value: data.estimated_value || 0,\n          assigned_to: sanitizeUUIDField(data.assigned_to),\n          lead_score: data.lead_score || 50,\n          win_probability: data.win_probability || 30,\n          customer_profile: data.customer_profile || {},\n          project_details: data.project_details || {},\n          sales_tracking: data.sales_tracking || {},\n          follow_up_date: data.follow_up_date || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n        };\n      } else if (type === 'documents') {\n        mappedData = {\n          title: data.title,\n          description: data.description || null,\n          type: data.type,\n          category: data.category || null,\n          project_id: sanitizeUUIDField(data.project_id),\n          file_url: data.file_url || null,\n          file_size: data.file_size || null,\n          file_format: data.file_format || null,\n          version: data.version || '1.0',\n          status: data.status || 'draft',\n          approved_by: sanitizeUUIDField(data.approved_by),\n          tags: data.tags || [],\n          is_confidential: data.is_confidential || false,\n          expiry_date: data.expiry_date || null,\n          metadata: data.metadata || {}\n        };\n      } else if (type === 'projects') {\n        mappedData = {\n          ...data,\n          manager_id: sanitizeUUIDField(data.manager_id)\n        };\n      } else if (type === 'tasks') {\n        mappedData = {\n          ...data,\n          assigned_to: sanitizeUUIDField(data.assigned_to),\n          assigned_by: sanitizeUUIDField(data.assigned_by) || currentUserId,\n          project_id: sanitizeUUIDField(data.project_id)\n        };\n      } else if (type === 'newsletter_subscribers') {\n        mappedData = {\n          email: data.email,\n          status: data.status || 'active',\n          source: data.source || null,\n          preferences: data.preferences || {}\n        };\n      }\n\n      let result;\n      switch (type) {\n        case 'users':\n          result = await dbHelpers.createUser(mappedData);\n          break;\n        case 'projects':\n          result = await dbHelpers.createProject(mappedData);\n          break;\n        case 'tasks':\n          result = await dbHelpers.createTask(mappedData);\n          break;\n        case 'materials':\n          result = await dbHelpers.createMaterial(mappedData);\n          break;\n        case 'documents':\n          result = await dbHelpers.createDocument(mappedData);\n          break;\n        case 'contacts':\n          result = await dbHelpers.createContact(mappedData);\n          break;\n        case 'quotes':\n          result = await dbHelpers.createQuote(mappedData);\n          break;\n        case 'posts':\n          result = await dbHelpers.createPost(mappedData);\n          break;\n        case 'newsletter_subscribers':\n          result = await dbHelpers.createNewsletterSubscriber(mappedData);\n          break;\n        default:\n          throw new Error(`Unsupported record type: ${type}`);\n      }\n\n      console.log('✅ Record created successfully:', result);\n      \n      // Invalidate cache and update state\n      invalidateCache(type);\n      setLastSyncTime(new Date());\n      setLastError(null);\n      \n      return result;\n    } catch (error) {\n      console.error('❌ Error creating record:', error);\n      setLastError(error instanceof Error ? error.message : 'Create operation failed');\n      throw error;\n    }\n  };\n\n  // Enhanced updateRecord with cache invalidation\n  const updateRecord = async <T = any>(id: string, data: any, type: string, authenticatedUserId?: string): Promise<T> => {\n    if (!isClient || !dbHelpers) {\n      throw new Error('Database not initialized');\n    }\n\n    try {\n      console.log('📝 Updating record:', { id, type, data });\n      \n      const currentUserId = authenticatedUserId || await getCurrentUserId();\n      \n      // Enhanced data sanitization\n      let sanitizedData = { ...data };\n      \n      if (type === 'documents') {\n        sanitizedData = {\n          ...data,\n          project_id: sanitizeUUIDField(data.project_id),\n          uploaded_by: sanitizeUUIDField(data.uploaded_by),\n          approved_by: sanitizeUUIDField(data.approved_by)\n        };\n      } else if (type === 'projects') {\n        sanitizedData = {\n          ...data,\n          manager_id: sanitizeUUIDField(data.manager_id)\n        };\n      } else if (type === 'tasks') {\n        sanitizedData = {\n          ...data,\n          assigned_to: sanitizeUUIDField(data.assigned_to),\n          assigned_by: sanitizeUUIDField(data.assigned_by),\n          project_id: sanitizeUUIDField(data.project_id)\n        };\n      } else if (type === 'contacts') {\n        sanitizedData = {\n          ...data,\n          assigned_to: sanitizeUUIDField(data.assigned_to)\n        };\n      } else if (type === 'quotes') {\n        sanitizedData = {\n          ...data,\n          assigned_to: sanitizeUUIDField(data.assigned_to)\n        };\n      }\n      \n      let result;\n      switch (type) {\n        case 'users':\n          result = await dbHelpers.updateUser(id, sanitizedData);\n          break;\n        case 'projects':\n          result = await dbHelpers.updateProject(id, sanitizedData);\n          break;\n        case 'tasks':\n          result = await dbHelpers.updateTask(id, sanitizedData);\n          break;\n        case 'materials':\n          result = await dbHelpers.updateMaterial(id, sanitizedData);\n          break;\n        case 'documents':\n          result = await dbHelpers.updateDocument(id, sanitizedData);\n          break;\n        case 'contacts':\n          result = await dbHelpers.updateContact(id, sanitizedData);\n          break;\n        case 'quotes':\n          result = await dbHelpers.updateQuote(id, sanitizedData);\n          break;\n        case 'posts':\n          result = await dbHelpers.updatePost(id, sanitizedData);\n          break;\n        case 'newsletter_subscribers':\n          result = await dbHelpers.updateNewsletterSubscriber(id, sanitizedData);\n          break;\n        default:\n          throw new Error(`Unsupported record type: ${type}`);\n      }\n\n      console.log('✅ Record updated successfully:', result);\n      \n      // Invalidate cache and update state\n      invalidateCache(type);\n      setLastSyncTime(new Date());\n      setLastError(null);\n      \n      return result;\n    } catch (error) {\n      console.error('❌ Error updating record:', error);\n      setLastError(error instanceof Error ? error.message : 'Update operation failed');\n      throw error;\n    }\n  };\n\n  // Enhanced deleteRecord with cache invalidation\n  const deleteRecord = async (id: string, type: string): Promise<void> => {\n    if (!isClient || !dbHelpers) {\n      throw new Error('Database not initialized');\n    }\n\n    try {\n      console.log('🗑️ Deleting record:', { id, type });\n      \n      switch (type) {\n        case 'users':\n          await dbHelpers.deleteUser(id);\n          break;\n        case 'newsletter_subscribers':\n          await dbHelpers.deleteNewsletterSubscriber(id);\n          break;\n        case 'contacts':\n          await dbHelpers.deleteContact(id);\n          break;\n        case 'quotes':\n          await dbHelpers.deleteQuote(id);\n          break;\n        default:\n          throw new Error(`Delete not implemented for type: ${type}`);\n      }\n\n      console.log('✅ Record deleted successfully');\n      \n      // Invalidate cache and update state\n      invalidateCache(type);\n      setLastSyncTime(new Date());\n      setLastError(null);\n    } catch (error) {\n      console.error('❌ Error deleting record:', error);\n      setLastError(error instanceof Error ? error.message : 'Delete operation failed');\n      throw error;\n    }\n  };\n\n  // Enhanced subscription management\n  const subscribeToChanges = (callback: (records: any[]) => void) => {\n    if (!isClient) return () => {};\n\n    setSubscribers(prev => [...prev, callback]);\n    \n    return () => {\n      setSubscribers(prev => prev.filter(cb => cb !== callback));\n    };\n  };\n\n  const broadcastChange = (record: any, action: 'create' | 'update' | 'delete') => {\n    if (!isClient) return;\n\n    console.log(`📡 Broadcasting ${action} for record:`, record);\n    setLastSyncTime(new Date());\n    \n    // Invalidate related cache\n    if (record.type) {\n      invalidateCache(record.type);\n    }\n  };\n\n  // Enhanced statistics with error handling\n  const getStatistics = async () => {\n    const defaultStats = {\n      totalProjects: 0,\n      activeProjects: 0,\n      totalTasks: 0,\n      completedTasks: 0,\n      totalContacts: 0,\n      newContacts: 0,\n      totalQuotes: 0,\n      pendingQuotes: 0,\n      dataAccuracy,\n      isOnline,\n      lastSyncTime: lastSyncTime?.toISOString(),\n      pendingChanges,\n      connectionRetries,\n      lastError\n    };\n\n    if (!isClient || !dbHelpers) {\n      return defaultStats;\n    }\n\n    try {\n      const stats = await dbHelpers.getDashboardStats();\n      return {\n        ...stats,\n        dataAccuracy,\n        isOnline,\n        lastSyncTime: lastSyncTime?.toISOString(),\n        pendingChanges,\n        connectionRetries,\n        lastError\n      };\n    } catch (error) {\n      console.error('❌ Error getting statistics:', error);\n      setLastError(error instanceof Error ? error.message : 'Statistics fetch failed');\n      return defaultStats;\n    }\n  };\n\n  // Enhanced recent activity with better error handling\n  const getRecentActivity = async () => {\n    if (!isClient || !dbHelpers) return [];\n\n    try {\n      const [contacts, quotes, projects] = await Promise.allSettled([\n        dbHelpers.getContacts(),\n        dbHelpers.getQuotes(),\n        dbHelpers.getProjects()\n      ]);\n\n      const allRecords = [];\n      \n      if (contacts.status === 'fulfilled') {\n        allRecords.push(...contacts.value.map(r => ({ ...r, type: 'contact' })));\n      }\n      if (quotes.status === 'fulfilled') {\n        allRecords.push(...quotes.value.map(r => ({ ...r, type: 'quote' })));\n      }\n      if (projects.status === 'fulfilled') {\n        allRecords.push(...projects.value.map(r => ({ ...r, type: 'project' })));\n      }\n\n      return allRecords\n        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n        .slice(0, 15)\n        .map(record => ({\n          id: record.id,\n          description: `${record.type} \"${record.name || record.title || 'Unnamed'}\" was created`,\n          user: 'System',\n          timestamp: record.created_at,\n          action: 'created',\n          validated: true,\n          accuracy: `${dataAccuracy}%`,\n          type: record.type\n        }));\n    } catch (error) {\n      console.error('❌ Error getting recent activity:', error);\n      setLastError(error instanceof Error ? error.message : 'Activity fetch failed');\n      return [];\n    }\n  };\n\n  // Enhanced validation\n  const validateRecord = (record: any): boolean => {\n    if (!record || typeof record !== 'object') return false;\n    if (!record.id || typeof record.id !== 'string') return false;\n    if (record.id.length === 0) return false;\n    return true;\n  };\n\n  // Enhanced data integrity verification\n  const verifyDataIntegrity = async (): Promise<{ isValid: boolean; issues: string[] }> => {\n    if (!isClient) {\n      return { isValid: false, issues: ['Client not initialized'] };\n    }\n\n    const issues: string[] = [];\n    \n    try {\n      // Test database connection\n      await testConnection();\n      \n      // Check data accuracy threshold\n      if (dataAccuracy < 95) {\n        issues.push(`Data accuracy is below threshold: ${dataAccuracy}%`);\n      }\n      \n      // Check network status\n      if (!isOnline) {\n        issues.push('System is offline');\n      }\n      \n      // Check connection retry status\n      if (connectionRetries > 0) {\n        issues.push(`Connection retries: ${connectionRetries}/${MAX_RETRY_ATTEMPTS}`);\n      }\n      \n      // Check for recent errors\n      if (lastError) {\n        issues.push(`Recent error: ${lastError}`);\n      }\n      \n      return {\n        isValid: issues.length === 0,\n        issues\n      };\n    } catch (error) {\n      issues.push(`Data integrity check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      return { isValid: false, issues };\n    }\n  };\n\n  // Enhanced database refresh\n  const refreshDatabase = () => {\n    if (!isClient) return;\n\n    console.log('🔄 Force refreshing database connection...');\n    \n    // Clear cache\n    clearCache();\n    \n    // Reset state\n    setLastSyncTime(new Date());\n    setDataAccuracy(98);\n    setPendingChanges(0);\n    setLastError(null);\n    setConnectionRetries(0);\n    \n    // Test connection\n    testConnection().catch(error => {\n      console.error('Failed to refresh connection:', error);\n      setLastError('Refresh failed');\n    });\n  };\n\n  // Context value\n  const value: DatabaseContextType = {\n    getAllRecords,\n    createRecord,\n    updateRecord,\n    deleteRecord,\n    subscribeToChanges,\n    broadcastChange,\n    getStatistics,\n    getRecentActivity,\n    isOnline,\n    lastSyncTime,\n    pendingChanges,\n    dataAccuracy,\n    validateRecord,\n    verifyDataIntegrity,\n    refreshDatabase,\n    clearCache,\n    retryConnection,\n    connectionRetries,\n    lastError\n  };\n\n  // Enhanced loading screen with connection status\n  if (!isClient || !isInitialized) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-6\"></div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            Initializing Database\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Connecting to database and setting up real-time subscriptions...\n          </p>\n          \n          {connectionRetries > 0 && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-yellow-400 rounded-full animate-pulse mr-3\"></div>\n                <p className=\"text-yellow-800 text-sm\">\n                  Retry attempt {connectionRetries}/{MAX_RETRY_ATTEMPTS}\n                </p>\n              </div>\n            </div>\n          )}\n          \n          {lastError && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-800 text-sm\">\n                {lastError}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DatabaseContext.Provider value={value}>\n      {children}\n    </DatabaseContext.Provider>\n  );\n};\n\n// Connection Status Component (optional export)\nexport const ConnectionStatus: React.FC = () => {\n  const { isOnline, lastSyncTime, pendingChanges, connectionRetries, lastError } = useDatabase();\n  \n  return (\n    <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-sm font-medium shadow-lg transition-all duration-200 ${\n      isOnline ? 'bg-green-100 text-green-800 border border-green-200' : 'bg-red-100 text-red-800 border border-red-200'\n    }`}>\n      <div className=\"flex items-center space-x-2\">\n        <div className={`w-2 h-2 rounded-full ${isOnline ? 'bg-green-500' : 'bg-red-500'}`} />\n        <span>{isOnline ? 'Online' : 'Offline'}</span>\n        {pendingChanges > 0 && (\n          <span className=\"bg-orange-500 text-white px-2 py-1 rounded-full text-xs\">\n            {pendingChanges} pending\n          </span>\n        )}\n        {connectionRetries > 0 && (\n          <span className=\"bg-yellow-500 text-white px-2 py-1 rounded-full text-xs\">\n            Retry {connectionRetries}\n          </span>\n        )}\n      </div>\n      {lastSyncTime && (\n        <div className=\"text-xs opacity-75 mt-1\">\n          Last sync: {lastSyncTime.toLocaleTimeString()}\n        </div>\n      )}\n      {lastError && (\n        <div className=\"text-xs text-red-600 mt-1 max-w-xs truncate\">\n          Error: {lastError}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DatabaseProvider;"],"names":[],"mappings":"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","debugId":null}}]
}